<html t:type="layoutWithAccordion" 
	  t:activeElement="literal:2"
	  t:title="Selector"
	  xmlns:t="http://tapestry.apache.org/schema/tapestry_5_1_0.xsd" 
	  xmlns:p="tapestry:parameter">
    
    <t:jquery.tabs  t:listTabData="prop:listTabData" t:activePanelId="0" />
    
    <t:block id="docs">
    	<t:componentDocumentation>
			<p:title>
				Selector Mixin
			</p:title>
			<p:description>
				Automatically injected into components that support getClientId(). This combines with
				the selector binding to create jQuery selectors. The selector binding supports 'this'
				which returns the selector for the enclosing component that supports getClientId().
				For the most part the selector binding will return the correct value. Specifically
				you can't always get the correct selector for a named component in a loop. More
				specifically if a component with the same name is rendered more than once on
				a page the selector changes as that component is rendered. In this case the
				selector binding will return a selector for the currently rendering component.
				This may or may not be the one you want.  
			</p:description>
			
			<p:link_1><t:componentLink t:url="http://jqueryui.com/demos/slider/"/></p:link_1>
		</t:componentDocumentation>
	</t:block>
    
    <t:block id="example">
   		<t:any class="${selector:this}" t:mixins="jquery/ui/slider,slidechange" 
	    	slidechange.event="slidechange"
	    	slidechange.callback="function (event,ui,url) {url.addContext( ${selector:this}.slider('option','value') )}"
	    	options='{min:0, max:100, value: 10, step: 2 }'
	    >${selector:this}
	    <t:any t:id="first" >${selector:this} ${selector:test}</t:any>
	    <t:any >${selector:this}</t:any>
	    <t:any >${selector:this}</t:any>
	    <t:any t:id="test">${selector:this} ${selector:first}</t:any>
	    ${selector:this}</t:any>   	
    </t:block>
    
</html>